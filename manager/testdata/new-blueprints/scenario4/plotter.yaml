apiVersion: app.m4d.ibm.com/v1alpha2
kind: Plotter
metadata:
  name: app1-ns1 # plotter name is a combination of app and namespace
  namespace: m4d-system
  labels:
spec:
  appSelector: # Selector of the application that uses this workload
    clusterName: thegreendragon
    workloadSelector:
      matchLabels:
        app: demoapp
  assets:
  - assetId: "m4d-notebook-sample/paysim"
    cluster: thegreendragon
    credentials:
      read:
        vault:
          address: http://vault.m4d-system:8200
          authPath: /v1/auth/kubernetes/login
          role: module
          secretPath: /v1/kubernetes-secrets/paysim?namespace=m4d-notebook-sample
    connection:
      s3:
        endpoint: localhost:8001
        bucket: srcbucket
        object: data.parq
    dataformat: parquet
  - assetId: "m4d-notebook-sample/users"
    cluster: thegreendragon
    credentials:
      read:
        vault:
          address: http://vault.m4d-system:8200
          authPath: /v1/auth/kubernetes/login
          role: module
          secretPath: /v1/kubernetes-secrets/users?namespace=m4d-notebook-sample
    connection:
      s3:
        endpoint: localhost:8001
        bucket: srcbucket
        object: users.parq
    dataformat: parquet
  - assetId: "m4d-notebook-sample/inventory"
    cluster: thegreendragon
    credentials:
      read:
        vault:
          address: http://vault.m4d-system:8200
          authPath: /v1/auth/kubernetes/login
          role: module
          secretPath: /v1/kubernetes-secrets/inventory?namespace=m4d-notebook-sample
    connection:
      s3:
        endpoint: localhost:8001
        bucket: srcbucket
        object: inventory.parq
    dataformat: parquet
  - assetId: "m4d-notebook-sample/paysim-step2" # the sink of step 2, consumed by step 1
    cluster: thegreendragon
    connection: 
      arrow-flight:
        endpoint:  app1-ns1-arrow-transform.m4d-blueprints
        assetId: "m4d-notebook-sample/paysim" # always the same as the assetId known to the user (assetId or advertisedAssetId)
  - assetId: "m4d-notebook-sample/paysim-step1" # used by workload to read the data
    cluster: thegreendragon
    connection:
      arrow-flight:
        endpoint:  app1-ns1-arrow-read.m4d-blueprints
        assetId: "m4d-notebook-sample/paysim" # always the same as the assetId known to the user (assetId or advertisedAssetId)
  - assetId: "m4d-notebook-sample/users-step2" # the sink of step 2, consumed by step 1
    cluster: thegreendragon
    connection:
      arrow-flight:
        endpoint:  app1-ns1-arrow-transform.m4d-blueprints
        assetId: "m4d-notebook-sample/users" # always the same as the assetId known to the user (assetId or advertisedAssetId)
  - assetId: "m4d-notebook-sample/users-step1" # used by workload to read the data
    cluster: thegreendragon
    connection:
      arrow-flight:
        endpoint:  app1-ns1-arrow-read.m4d-blueprints
        assetId: "m4d-notebook-sample/users" # always the same as the assetId known to the user (assetId or advertisedAssetId)
  - assetId: "m4d-notebook-sample/inventory-step2" # the sink of step 2, consumed by step 1
    cluster: thegreendragon
    connection:
      arrow-flight:
        endpoint:  app1-ns1-arrow-transform.m4d-blueprints
        assetId: "m4d-notebook-sample/inventory" # always the same as the assetId known to the user (assetId or advertisedAssetId)
  - assetId: "m4d-notebook-sample/inventory-step1" # used by workload to read the data
    cluster: thegreendragon
    connection:
      arrow-flight:
        endpoint:  app1-ns1-arrow-read.m4d-blueprints
        assetId: "m4d-notebook-sample/inventory" # always the same as the assetId known to the user (assetId or advertisedAssetId)


  flows:
  - name: flow-paysim
    flowType: read
    assetId: "m4d-notebook-sample/paysim"
    subflows:
    - name: subflow-paysim
      flowType: read
      triggers: 
      - workload
      steps:
      - - name: step1
          cluster: thegreendragon
          template: transform-template
          parameters:
            source: #sink of step2 
              assetID: "m4d-notebook-sample/paysim-step2"
            api:
               assetID: "m4d-notebook-sample/paysim-step1" # used by workload to read the data
            actions:
            - action: redact
              column: field1
        - name: step2
          cluster: thegreendragon
          template: read-template
          parameters:
            source: 
              assetId: "m4d-notebook-sample/paysim"
            api:
              assetId: "m4d-notebook-sample/paysim-step2" # Can't use same api endpoint for both the read and transform steps
  - name: flow-users
    flowType: read
    assetId: "m4d-notebook-sample/users"
    subflows:
    - name: subflow-users
      flowType: read
      triggers: 
      - workload
      steps:
      - - name: step1
          cluster: thegreendragon
          template: transform-template
          parameters:
            source:  #sink of step2
              assetID: "m4d-notebook-sample/users-steps2"
            api:
              assetID: "m4d-notebook-sample/users-step1"
            actions:
            - action: redact
              column: blood_group
      - - name: step2
          cluster: thegreendragon
          template: read-template
          parameters:
            source:
              assetId: "m4d-notebook-sample/users"
            api:
              assetID: "m4d-notebook-sample/users-step2"
            actions:
            - action: redact
              column: blood_group
  - name: flow-inventory
    flowType: read
    assetId: "m4d-notebook-sample/inventory"
    subflows:
    - name: subflow-inventory
      flowType: read
      trigger: workload
      steps:
      - - name: step1
          cluster: thegreendragon
          template: transform-template
          parameters:
            source:
              assetID: m4d-notebook-sample/inventory-step2
            api:
                assetID: m4d-notebook-sample/inventory-step1
            actions:
            - action: redact
              column: field2
      - - name: step2
          cluster: thegreendragon
          template: read-template
          parameters:
            source:
              assetId: "m4d-notebook-sample/inventory"
            api:
                assetID: m4d-notebook-sample/inventory-step2
            actions:
            - action: redact
              column: field2
  templates:
  - name: transform-template
    modules:
    - name: arrow-flight-config
      kind: M4DModule
      chart:
        name: ghcr.io/mesh-for-data/arrow-flight-config-module:0.1.0
      capabilities:
      - capability: read
        scope: workload
        supportedInterfaces:
        - source:
          protocol: s3
          dataformat: parquet
        - source:
          protocol: s3
          dataformat: csv
    - name: transform-config
      kind: M4DModule
      chart:
        name: ghcr.io/mesh-for-data/m4d-arrow-flight-transform-conf:0.1.0
      capabilities:
      - capability: transform
        scope: asset
        actions:
        - id: redact
          level: column
        - id: remove
          level: column

  - name: read-template
    modules:
    - name: arrow-flight-config
      kind: M4DModule
      chart:
        name: ghcr.io/mesh-for-data/arrow-flight-config-module:0.1.0
      capabilities:
      - capability: read
        scope: workload
        supportedInterfaces:
        - source:
          protocol: s3
          dataformat: parquet
        - source:
          protocol: s3
          dataformat: csv

status:
  observedState: Not Ready
  observedGeneration: 1
  # The global modules are generated when the blueprints are generated and injected into them.
  # Yet they still have a status that is important to the workflow.
  flows:
  - name: flow-paysim
    status: Ready
    subflows:
    - name: subflow-paysim
      status: Ready
  - name: flow-users
    status: Ready
    subflows:
    - name: subflow-users
      status: Ready
  - name: flow-inventory
    status: Ready
    subflows:
    - name: subflow-inventory
      status: Not Ready
  assets:
  - name: m4d-notebook-sample/paysim
    endpoint: app1-ns1.m4d-blueprints
    port: 8080
    status: Ready
  - name: m4d-notebook-sample/users
    endpoint: app1-ns1.m4d-blueprints
    port: 8080
    status: Ready
  - name: m4d-notebook-sample/inventory
    endpoint: app1-ns1.m4d-blueprints
    port: 8080
    status: Not Ready
    errors:
    - "This would be a possible error"
  conditions:
  - type: Error
    status: "False"
    message: "This would be a possible error"
